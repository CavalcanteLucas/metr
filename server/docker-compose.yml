version: '3.9'

services:
  metr-server-app:
    container_name: metr-server-app
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "
        sleep 2 &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    depends_on:
      - metr-server-db
    volumes:
      - .:/code
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST:-metr-server-db}
      - KEY_FILES_LOCATION=${KEY_FILES_LOCATION:-/code/credentials/credentials.json'}
    networks:
      - metr-server-network
      - metr-network
    links:
      - metr-server-redis
      - metr-server-db

  metr-server-db:
    container_name: metr-server-db
    image: postgres:14.1-alpine
    ports:
      - "5433:5433"
    command: -p 5433
    volumes:
      - type: volume
        source: metr-postgres-data
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 3s
      retries: 3
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    networks:
      - metr-server-network

  metr-server-redis:
    container_name: metr-server-redis
    image: redis:alpine
    networks:
      - metr-server-network

  metr-server-celery:
    container_name: metr-server-celery
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A server worker --loglevel=DEBUG
    depends_on:
      - metr-server-app
      - metr-server-db
      - redis
    volumes:
      - .:/code
    env_file:
      - .env
    environment:
      - DB_HOST=${DB_HOST:-metr-server-db}
    networks:
      - metr-server-network

volumes:
  metr-postgres-data:

networks:
  metr-network:
    name: metr-network
  metr-server-network:
    name: metr-server-network
    driver: bridge
